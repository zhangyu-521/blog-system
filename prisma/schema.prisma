// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?  @db.Text
  role      UserRole @default(USER)
  status    UserStatus @default(ACTIVE)
  
  // 密码重置相关
  passwordResetToken   String?
  passwordResetExpires DateTime?
  
  // 邮箱验证
  emailVerified        Boolean   @default(false)
  emailVerifyToken     String?
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  articles     Article[]
  comments     Comment[]
  
  @@map("users")
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// 用户状态枚举
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

// 文章模型
model Article {
  id          String        @id @default(cuid())
  title       String        @db.VarChar(255)
  slug        String        @unique @db.VarChar(255)
  content     String        @db.LongText
  excerpt     String?       @db.Text
  coverImage  String?
  status      ArticleStatus @default(DRAFT)
  viewCount   Int           @default(0)
  likeCount   Int           @default(0)
  
  // SEO 相关
  metaTitle       String? @db.VarChar(255)
  metaDescription String? @db.Text
  metaKeywords    String? @db.Text
  
  // 发布相关
  publishedAt   DateTime?
  allowComments Boolean   @default(true)
  isPinned      Boolean   @default(false)
  isFeatured    Boolean   @default(false)
  
  // 关联关系
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  comments    Comment[]
  articleTags ArticleTag[]
  
  // 索引
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt])
  @@map("articles")
}

// 文章状态枚举
enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// 分类模型
model Category {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(100)
  slug        String  @unique @db.VarChar(100)
  description String? @db.Text
  color       String? @db.VarChar(7) // 十六进制颜色值
  icon        String? @db.VarChar(50)
  
  // SEO 相关
  metaTitle       String? @db.VarChar(255)
  metaDescription String? @db.Text
  
  // 排序
  sortOrder Int @default(0)
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  articles Article[]
  
  @@map("categories")
}

// 标签模型
model Tag {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(50)
  slug        String  @unique @db.VarChar(50)
  description String? @db.Text
  color       String? @db.VarChar(7) // 十六进制颜色值
  
  // 使用统计
  useCount Int @default(0)
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  articleTags ArticleTag[]
  
  @@map("tags")
}

// 文章标签关联表
model ArticleTag {
  id        String @id @default(cuid())
  articleId String
  tagId     String
  
  // 关联关系
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  // 时间戳
  createdAt DateTime @default(now())
  
  @@unique([articleId, tagId])
  @@map("article_tags")
}

// 评论模型
model Comment {
  id      String        @id @default(cuid())
  content String        @db.Text
  status  CommentStatus @default(PENDING)
  
  // IP 和用户代理（用于反垃圾）
  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text
  
  // 关联关系
  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // 嵌套评论
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 索引
  @@index([articleId])
  @@index([authorId])
  @@index([status])
  @@index([parentId])
  @@map("comments")
}

// 评论状态枚举
enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}